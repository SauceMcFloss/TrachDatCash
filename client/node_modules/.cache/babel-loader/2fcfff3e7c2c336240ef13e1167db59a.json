{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    console.log(\"Attempting registerUser POST\");\n    var userLogin = {\n      email: userData.email,\n      password: userData.password\n    };\n    axios.post(\"/expenses/register\", userData).then(function (res) {\n      dispatch(loginUser(userLogin));\n      history.push(\"/dashboard\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    console.log(\"Attempting loginUser POST\");\n    axios.post(\"/expenses/login\", userData).then(function (res) {\n      // Save to localStorage\n      // Set token to localStorage\n      var token = res.data.token;\n      localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded)); //const userid = jwt_decode(localStorage.getItem(\"jwtToken\")).id;\n      //console.log(userid);\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    console.log(\"Attempting logoutUser function\"); // Remove token from local storage\n\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Lexii\\Documents\\GitHub\\TrackDatCash\\client\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","console","log","userLogin","email","password","post","then","res","loginUser","push","catch","err","type","payload","response","data","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC9DC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,QAAMC,SAAS,GAAG;AAChBC,MAAAA,KAAK,EAAEN,QAAQ,CAACM,KADA;AAEhBC,MAAAA,QAAQ,EAAEP,QAAQ,CAACO;AAFH,KAAlB;AAICd,IAAAA,KAAK,CACFe,IADH,CACQ,oBADR,EAC8BR,QAD9B,EAEGS,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACfR,MAAAA,QAAQ,CAACS,SAAS,CAACN,SAAD,CAAV,CAAR;AACAJ,MAAAA,OAAO,CAACW,IAAR,CAAa,YAAb;AACA,KALA,EAMGC,KANH,CAMS,UAAAC,GAAG;AAAA,aACRZ,QAAQ,CAAC;AACPa,QAAAA,IAAI,EAAEnB,UADC;AAEPoB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KANZ;AAYD,GAlB2B;AAAA,CAArB,C,CAoBP;;AACA,OAAO,IAAMP,SAAS,GAAG,SAAZA,SAAY,CAAAX,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAChDC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACCX,IAAAA,KAAK,CACFe,IADH,CACQ,iBADR,EAC2BR,QAD3B,EAEGS,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AAEA;AAHW,UAIHS,KAJG,GAIOT,GAAG,CAACQ,IAJX,CAIHC,KAJG;AAKXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALW,CAMX;;AACAzB,MAAAA,YAAY,CAACyB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMG,OAAO,GAAG3B,UAAU,CAACwB,KAAD,CAA1B,CATW,CAUX;;AACAjB,MAAAA,QAAQ,CAACqB,cAAc,CAACD,OAAD,CAAf,CAAR,CAXW,CAad;AACA;AACE,KAjBH,EAkBGT,KAlBH,CAkBS,UAAAC,GAAG;AAAA,aACRZ,QAAQ,CAAC;AACPa,QAAAA,IAAI,EAAEnB,UADC;AAEPoB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAlBZ;AAwBD,GA1BgC;AAAA,CAA1B,C,CA4BP;;AACA,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLP,IAAAA,IAAI,EAAElB,gBADD;AAELmB,IAAAA,OAAO,EAAEM;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACLT,IAAAA,IAAI,EAAEjB;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAM2B,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAvB,QAAQ,EAAI;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAD2C,CAE1C;;AACAgB,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAH0C,CAI1C;;AACAhC,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAL0C,CAM1C;;AACAQ,IAAAA,QAAQ,CAACqB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GARyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n\tconsole.log(\"Attempting registerUser POST\");\r\n\tconst userLogin = {\r\n\t  email: userData.email,\r\n\t  password: userData.password\r\n\t};\r\n  axios\r\n    .post(\"/expenses/register\", userData)\r\n    .then(res => {\r\n\t\tdispatch(loginUser(userLogin));\r\n\t\thistory.push(\"/dashboard\");\r\n\t})\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n\tconsole.log(\"Attempting loginUser POST\");\r\n  axios\r\n    .post(\"/expenses/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n\t  \r\n\t  //const userid = jwt_decode(localStorage.getItem(\"jwtToken\")).id;\r\n\t  //console.log(userid);\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n\tconsole.log(\"Attempting logoutUser function\");\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}